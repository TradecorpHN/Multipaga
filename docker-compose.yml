# docker-compose.yml - Configuración para desarrollo y producción
version: '3.8'

services:
  # ============================================
  # Aplicación principal Next.js
  # ============================================
  multipaga:
    build:
      context: .
      dockerfile: Dockerfile
      target: runner
    container_name: multipaga-app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - HOSTNAME=0.0.0.0
      # Variables de entorno de la aplicación
      - HYPERSWITCH_BASE_URL=${HYPERSWITCH_BASE_URL:-https://sandbox.hyperswitch.io}
      - HYPERSWITCH_API_KEY=${HYPERSWITCH_API_KEY}
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-here}
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${DATABASE_URL}
      # Next.js specific
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - multipaga-network
    volumes:
      # Logs directory (opcional)
      - ./logs:/app/logs
      # Health check logs
      - /tmp
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ============================================
  # Redis para caché y sesiones
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: multipaga-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --save 60 1000
      --loglevel warning
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
      - ./redis.conf:/etc/redis/redis.conf:ro
    networks:
      - multipaga-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # ============================================
  # Nginx como reverse proxy (producción)
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: multipaga-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      multipaga:
        condition: service_healthy
    networks:
      - multipaga-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ============================================
  # Postgres (opcional para datos persistentes)
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: multipaga-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-multipaga}
      - POSTGRES_USER=${POSTGRES_USER:-multipaga_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - multipaga-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-multipaga_user} -d ${POSTGRES_DB:-multipaga}"]
      interval: 10s
      timeout: 5s
      retries: 3
    profiles:
      - with-postgres

# ============================================
# Volúmenes persistentes
# ============================================
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local

# ============================================
# Red interna
# ============================================
networks:
  multipaga-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16